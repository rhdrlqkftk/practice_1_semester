모델단은 동기 프로그램 , 마바티스 spring 프레임 워크를 썼으며, 
화면단은 화면단 프레임 워크 tiles는 include해서 비동기는 restful로 구현했다. 
restful - swagel api를 써서 만들어서 씀. 
restful 차이점 
기존에는 ( get- head, post- body) 였다면, 서비스를 하는 걸 알려준다 (get-select, post -insert , put -update, delate-delate )
 
1. 객체 관리 - DI (Dependency Injection) 
  1) xml로 객체 정보 등록 : legacy. 
  2) 애노테이션으로 객체 정보 등록 : legacy
  **1) + 2) = legacy 
  3) 완전 애노테이션 : spring boot 

2. DB ORM
3. AOP : 관점지향프로그래밍. ( 절차지향 -> 객체지향 -> 관점지향 ) // 넘어가는 개념.  
4. MVC : dispatcher 서블릿 하나를 중심으로 다른 객체들이 붙는 구조. 


pom.xml : maven 설정 파일. 
창고를 2개나누어서 쓴다 ( 하나로 쓸수도 있다 ) 

java에서 Spring을 쉽게 쓸 수 있게 하는 것 ( STS )
simple-spring- maven 
1) spring -> application-config.xml
2) web-inf -> mvc-config.xml ( 모델 쪽 흐름 ) 

1) spring-> root-context.xml
2) spring-> appServlet-> servlet-context.xml 


////////////////////////////////
빈(객체)의 범위 
: 스프링 설정파일 있고 bean을 만듬 
GenericXmlApplicationContext를 사용해서 쓴다. 

원래는 new 키워드를 사용해서 호출해줬는데,
new ClassName(); // 메모리는 늘 새로운 객체를 생성하는 문제가 생긴다. 
스프링은 이미 객체를 생성해두고 동일한 객체를 자바 코드에서는 호출해서 쓴다. 이를 싱글톤이라고 한다. 
프로토타입은 반대 개념 ( 객체를 새롭게 계속 생성한다 )
<bean id =" " class =" ~~"  scope =" prototype"> 이 된다. 
property : TestService class의 setTestDao method를 의미
걍 쉽게 
<bean id="dependencyBean" class="scope.ex.DependencyBean">
		<constructor-arg ref="injectionBean" />
		<property name="injectionBean" ref="injectionBean" />
	</bean>
이모양에서 처음 만들땐 construcr~ setter한번만해주고, 
그다음부터는 객체를 생성하지 않고 property에 의해서set으로 객체를 호출되는 방식이다.  그렇기 때문에 property를 쓰면 set이 무조건 있어야겠다. 


*의존 객체 자동 주입 ( 9강 ) 
스프링 설정 파일에서 의존 객체를 주입할 때 
constructor-org , property 태그로  의존대상 스프링컨테이너에 넣음 근데 그거를 @Autowired 써서 자동으로 해준다. 
여러 bean들이 있으면 여기에서 필요한 녀석을 autowired가 찾아서 자동 주입한다. 
A <-> B 

@Autowired  ,@Resource .
@Autowired 를 사용하면 위에서 설명한 스프링컨테이너 xml에서 constructor - arg를 쓰지 않고도 쓸 수 있다. 
하지만 <context:annotation-config />를 써줘야한다. 
즉, 어플리케이션 컨텍스트안에 이미 등록된 빈들의 어노테이션을 활성화한다. 
 <context:annotation-config />를 쓰기 위해서는 xmlns:context, xmlns:xsi, xsi:schemaLocation 를 써줘야한다. 

<정리> 
즉 @autowired를 쓰면 스프링 컨테이너에서 constructor-arg나 property로 설정할 필요없이, bean 객체를 자동 주입할 수 있고, @autowired를 쓰기 위해서는  <context:annotation-config />를 써야하고 이거를 쓰기 위해서는 xmlns:context, xmlns:xsi, xsi:schemaLocation 써야한다.

autowired는 객체를 생성할 때만 넣는다라고 생각하자 일단. 

application context에서 
bean : spring에서 사용하는 객체
<bean id="..." class="..."></bean>
id는 만드는 객체명, class는 위치. 

<construct-arg ref ="studentDao ">


@requestparameter 
클라이언트가 name으로 던졌는데 cname으로 받고 싶을 때 쓰는방법. 

@PathVariable - 중간에 있는거 가져올 때는 PathVariable. 
 / {id} / 
